import click
import config

# import dask
from pathlib import Path
import labbench as lb
import pandas as pd
import os
import numpy as np
import subprocess as sp
from glob import glob
from templatepress import get_figure_metadata

FIGURE_PREAMBLE = r"""
% This file was autogenerated. Changes made by hand will be overwritten if the file is generated again.
"""

FIGURE_TEMPLATE = r"""
\begin{{figure}}[h!]
    \centering
    \includegraphics{{{pdf_rel_path}}}
    \caption{{{caption}}}
    \label{{fig:{label}}}
\end{{figure}}

"""

def svg_to_pdf(svg_path, pdf_path):
    ret = sp.run(
        [
            'inkscape',
            str(svg_path),
            f'--export-filename={str(pdf_path)}',
            '-T'
        ],
        capture_output=True
    )

    if ret.returncode != 0:
        print(ret.stderr)
        raise IOError(f"svg to pdf: inkscape returned error code {ret.returncode}")

# def path_to_label(path):
#     import re, string

#     pattern = re.compile(r'[\W_]+')
#     return 'dataset-'+pattern.sub('-', Path(fig).with_suffix('').name).lower()

EXPORT_ROOT = Path(config.EXPORT_DATA_ROOT)/'Analysis'
TEX_ROOT = EXPORT_ROOT/'tex'

for pattern in config.EXPORT_FIGURES:
    files = list(EXPORT_ROOT.glob(pattern))

    if len(files) == 0:
        raise ValueError(f'pattern "{EXPORT_ROOT/pattern} matched no files')

    # make subdir name from the pattern
    tex_output = str(FIGURE_PREAMBLE)

    fig_dict = {} # keyed on date metadata to ensure order

    subdir_name = Path(pattern.replace('*', '')).with_suffix('').name
    fig_dir_out = TEX_ROOT/'fig'/subdir_name
    fig_dir_out.mkdir(exist_ok=True, parents=True)

    for art_path in (files):
        print(art_path)
        pdf_filename = art_path.with_suffix('.pdf').name

        with open(art_path, 'rb') as fd:
            label, caption, date = get_figure_metadata(fd.read())

        svg_to_pdf(
            art_path,
            fig_dir_out/pdf_filename
        )

        fig_dict[date] = FIGURE_TEMPLATE.format(
            pdf_rel_path=(Path('fig')/subdir_name/pdf_filename).as_posix(),
            label=f'{subdir_name}_{label}',
            caption=caption.replace('\n\n','\n').replace('\r\n', '\n')
        )

    for date in sorted(fig_dict.keys()):
        tex_output += fig_dict[date]

    tex_path = TEX_ROOT/f'{subdir_name}_figs.tex'
    with open(tex_path, 'wb') as fd:
        fd.write(tex_output.encode())

    print(f'wrote {tex_path}')